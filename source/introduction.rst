.. index::
   single: Introduction

Introduction
========


Fuchsia is a Web Application Framework
------------------

Fuchsia is a light-weight toolkit targeting developers who build web applications in PHP. Its goal is to provide an environment in which nothing but what is used in your codebase per-request is loaded (lazy-loading). It enables developers to logically structure their code while enforcing some coding standards. It is a collection of packages developed by AuraPHP, Phinx, Fuchsia, Symphony, and others, glued into a single environment.

Fuchsia is Free
------------------
Fuchsia and its libraries are all licensed under the MIT license. Though some of the libraries are not strictly maintained by Fuchsia, we use libraries only licensed under MIT.

Fuchsia can be a Lightweight Micro-Framework
------------------
Fuchsia essentially only requires one library to run: ActionDispatch. From there you can require a file, execute a function, etc. Creating a controller is completely optional in this case. You are not forced to extend the ActionController\Base class which provides response parsing and access to the ActionView library. Fuchsia provides the ActionController library to accelerate development.

Fuchsia can be a Lightweight Micro-Framework
------------------
Fuchsia essentially only requires one library to run: ActionDispatch. From there you can require a file, execute a function, etc. Creating a controller is completely optional in this case. You are not forced to extend the ActionController\Base class which provides response parsing and access to the ActionView library. Fuchsia provides the ActionController library to accelerate development.

Fuchsia Generates Clean URLs
------------------
The URLs generated by Fuchsia are clean and search-engine friendly. Fuchsia uses a segment-based approach.

.. code-block:: text

  http://fuchsia.io/blog/intro-to-fuchsia
  
No file extensions are included and do not allow a file extension. A simple .htaccess rule can resolve this if needed.

Fuchsia Does Not Use a Template Engine
------------------
Fuchsia uses a two-step view implementation for rendering views on the server-side. Fuchsia includes a HAML parser (MtHaml) if you wish to write/intermix your templates and views with HAML.

Fuchsia Supports Composer and Third-Party Libraries
------------------
All libraries installed via composer are immediately accessible to the Fuchsia. Other methods can easily be implemented by installing your libraries in a lib or the vendor directory. You can then require your library when necessary.

Fuchsia is Namespaced
------------------
All Core Libraries are Namespaced. Fuchsia, by default, enforces that your application follows some naming conventions.